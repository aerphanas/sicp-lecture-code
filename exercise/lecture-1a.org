#+TITLE: SICP Exercise for lecture 1 A

* Exercise 1.1:
Below is a sequence of expressions. What is
the result printed by the interpreter in response to each ex-
pression? Assume that the sequence is to be evaluated in
the order in which it is presented.

#+begin_src scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
      b
      a)
  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
#+end_src

* Exercise 1.2:
Translate the following expression into preﬁx form:

\begin{equation}
\frac{ 5 + 4 + (2 − (3 − (6 + \frac{ 4 } { 5 }))) }
     { 3(6 - 2)(2 - 7) }
\end{equation}

* Exercise 1.3:
Deﬁne a procedure that takes three numbers
as arguments and returns the sum of the squares of the two
larger numbers.

* Exercise 1.4:
Observe that our model of evaluation allows
for combinations whose operators are compound expres-
sions. Use this observation to describe the behavior of the
following procedure:

#+begin_src scheme
  (define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))
#+end_src

* Exercise 1.5:
Ben Bitdiddle has invented a test to determine
whether the interpreter he is faced with is using applicative-
order evaluation or normal-order evaluation. He deﬁnes the
following two procedures:

#+begin_src scheme
  (define (p) (p))
  (define (test x y)
    (if (= x 0) 0 y))
#+end_src

then he evaluates the expression

#+begin_src scheme
  (test 0 (p))
#+end_src

What behavior will Ben observe with an interpreter
that uses applicative-order evaluation? What behavior
will he observe with an interpreter that uses
normal-order evaluation? Explain your answer.
